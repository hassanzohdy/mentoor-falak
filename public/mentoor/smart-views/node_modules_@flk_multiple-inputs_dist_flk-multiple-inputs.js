_Component({
                selector: 'flk-multiple-inputs',
                c: 'FlkMultipleInputs', // c for component name
                unique: false, // flag to determine if the component object will be unique or not
                observable: true,
                observe: ['id','label','options','isMultiLingual','languages','subName','optionName','required','name','removeOption','addNewOption'],
                children: {},
                render: function (component) {
                    let elSebyX = eo('div',null,null,`class`,`form-group`);
let elctIvL = eo('label',null,null,`for`,`${ component.id }`);
text(component.label);
ec('label');
for (let i in component.options) {
let option = component.options[i]; 
 let iiiT_l = 'mAUCXss' + i;
let elJ3jLE = eo('div','MtenjrKZPwJb' + i+iiiT_l,null,`class`,`row m-t-1`);
let elwPkgj = eo('div','en6ff'+iiiT_l,null,`class`,`col-sm-10`);
let cndKK8R = component.isMultiLingual;
this.setState('strNU5B', cndKK8R);
let cndiFog = !(cndKK8R);
this.setState('stryU9d', cndiFog);
if (cndKK8R) { 
console.log(2);
for (let langIndex in component.languages) {
let languageCode = component.languages[langIndex]; 
 let iib1N8 = 'UYf40qh' + langIndex;
let el6qRlq = ev('input','qFG7DtQd3o9h' + langIndex+iiiT_l+iib1N8,null, eventListeners, {oninput:[function(e) {var $el = this;Object.set(option, component.subName ? component.subName + '.' + languageCode : languageCode, $el.value)},function(e) {let value = this.value.trim();if (component.required && Is.empty(value)) {return cfrmdlr.addError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode);}]},`name`,`${(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode).toInputName()}`,`placeholder`,`${component.optionName + ' ' + languageCode}`,`value`,`${component.subName ? Object.get(option, component.subName + '.' + languageCode) : option[languageCode]}`,`type`,`text`,`class`,`form-control`);
let cndHNqX = cfrmdlr.getError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode);
this.setState('stOiD7L', cndHNqX);
if (cndHNqX) { 
let el1M40U = eo('div','l4Nff'+iiiT_l+iib1N8,null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name + '.' + i + '.' + (component.subName ? component.subName + '.' : '') + languageCode));
ec('div');
}}
}else { 
let el9iYBz = ev('input','O6Eff'+iiiT_l,null, eventListeners, {oninput:[function(e) {component.options[i] = this.value;},function(e) {let value = this.value.trim();if (component.required && Is.empty(value)) {return cfrmdlr.addError(component.name + '.' + i, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name + '.' + i);}]},`value`,`${fval(component.options[i])}`,`name`,`${(component.name + '.' + i).toInputName()}`,`placeholder`,`${component.optionName}`,`type`,`text`,`class`,`form-control`);
el9iYBz.value = fval(component.options[i]);
let cndSq2k = cfrmdlr.getError(component.name + '.' + i);
this.setState('stRt2D_', cndSq2k);
if (cndSq2k) { 
let elW2jhN = eo('div','9Q_ff'+iiiT_l,null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name + '.' + i));
ec('div');
}}ec('div');
let cnd_5Pb = ! component.required || Number(i) > 0;
this.setState('steygvK', cnd_5Pb);
if (cnd_5Pb) { 
let eljIiiJ = eo('div','VSnff'+iiiT_l,null,`class`,`col-sm-2`);
let elDTjqL = eo('button','tnmff'+iiiT_l,null, eventListeners, {onclick:[function(e) {var $el = this;component.removeOption(i)}]},`title`,``,`type`,`button`,`class`,`btn btn-circle m-0 btn-sm icon btn-danger`);
let eleGanO = eo('i','1Ohff'+iiiT_l,null,`class`,`${fas('trash')} icon`);
ec('i');
ec('button');

                    setTimeout(function () {
                        let $el = elDTjqL;
                        
            true && tippyTooltip($el, {arrow:true,content:`${ trans('deleteItem', component.optionName) }`});
        ;
                    }, 20);                
                ec('div');
}ec('div');
}
let elTsDMr = eo('div');
let elzTkYc = eo('button',null,null, eventListeners, {onclick:[function(e) {var $el = this;component.addNewOption()}]},`title`,``,`type`,`button`,`class`,`btn icon btn-sm btn-circle btn-primary`);
let elHhNDJ = eo('i',null,null,`class`,`${fas('plus')} icon`);
ec('i');
ec('button');

                    setTimeout(function () {
                        let $el = elzTkYc;
                        
            true && tippyTooltip($el, {arrow:true,content:`${ trans('add-new-item', component.optionName) }`});
        ;
                    }, 20);                
                ec('div');
ec('div');

                    this.isReadyToGo();
                }
        });