_Component({
                selector: 'flk-datepicker',
                c: 'Datepicker', // c for component name
                unique: false, // flag to determine if the component object will be unique or not
                observable: true,
                observe: ['name','id','placeholder','inputValue','isRequired'],
                children: {},
                render: function (component) {
                    let elk6d1o = eo('div',null,null,`class`,`datepicker-wrapper`);
let elvZDBi = eo('div',null,null,`class`,`form-group ${cls({'group-error': !!cfrmdlr.getError(component.name) })}`);
let elhtW1i = eo('label',null,null,`for`,`${component.id}`);
text(trans(component.inputs.getOption('label')));
let cndFWKA = component.isRequired;
this.setState('stkJk1g', cndFWKA);
if (cndFWKA) { 
let elH05AM = eo('span','dWmf',null,`title`,`${trans(`required`)}`,`class`,`required`);
text(`*`);
ec('span');
}ec('label');
let elMRFrV = ev('input',null,null, eventListeners, {oninput:[function(e) {component.inputValue = this.value;},function(e) {let value = this.value.trim();if (component.isRequired && Is.empty(value)) {return cfrmdlr.addError(component.name, 'required', trans('validation.required'));}return cfrmdlr.removeError(component.name);}]},`value`,`${fval(component.inputValue)}`,`id`,`${component.id}`,`name`,`${(component.name).toInputName()}`,`placeholder`,`${component.placeholder}`,`type`,`text`,`class`,`${ component.inputs.getOption('class', '') }`);
component.input = elMRFrV;
elMRFrV.value = fval(component.inputValue);
let cndGQE3 = cfrmdlr.getError(component.name);
this.setState('stUL2lK', cndGQE3);
if (cndGQE3) { 
let elvT9Hl = eo('div','7k0f',null,`class`,`error-msg`);
text(cfrmdlr.getError(component.name));
ec('div');
}ec('div');
ec('div');

                    this.isReadyToGo();
                }
        });